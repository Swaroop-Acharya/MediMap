Backend:-
Apache Kafka
Spring Security
Microservices
Docker
Redis
REST APIs
GraphQL
API Gateway
JWT, OAuth2.0


Frontend:-
Next JS 
Tailwind CSS



Modules :- 

<modules>
    <module>service-registry</module>
    <module>api-gateway</module>
    <module>user-service</module>
    <module>pharmacy-locator-service</module>
    <module>inventory-service</module>
    <module>order-service</module>
    <module>delivery-service</module>
 </modules>



Product-service:-
New Topics learnt:-
Test containers
Rest Asurred
Docker
Records in java


Done:-
Learnt about Service-registry and API gateway
Created Mongodb docker compose for this service - Learn: yml information for creating a docker container
Created end points GET, POST
Learnt about Java records how it usefull for creating DTO classes
Learnt about test containers -  advangtages, problems solved by this , REST assured - definition and uses




Problems faced:
Lombok error : fixed add a plugin to pom regarding this

Order-Service:-
New topics learnt:-
Flyweight

Problem: Integration test with wiremock

Done:-
Setup SQL
Integration test for POST end point
Flyweight - Data migration 

Problem faced:-
1) Flyweight error
Detected failed migration to version 1 (init).
Please remove any half-completed changes then run repair to fix the schema history.
Solution: https://stackoverflow.com/questions/41147768/caused-by-org-flywaydb-core-api-flywayexception-validate-failed-migration-che

read this:-
https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring

Inventory-Service:-
Done:-
POST req

Problem faced:-
t_inventory_seq error fixed it by changing the generatedValue startegy from AUTO to IDENTITY

read this:-

Api-Gateway:
Circuit braker states 
Actuator for monitoring the health of microservies
How to enable acuator health for circuit braker.
Fallbacks in routes in api gateway.


Kafka:
Distributed message streaming tool/ Event driven 
Integrating Kafka with Schema registry.
Core capabilities of Kafka
Dependency used: Spring for Apache Kafka
What is zookeeper, how it manages the kafka clusters (orchestrator)
What is boostrap servers property.
What is schema registory, why orderplacedEvent removed from producer and consumer
what is avro how it is helpfull for maintaining single point of truth


Kubernates: (Rosource linK: https://spring.io/guides/topicals/spring-on-kubernetes#_deploying_to_kubernetes)
what is k8s, its uses
What is Cluster, Nodes, Pods, Services, Deployment
Nodes: Master node, Worker Nodes 
What pods contains
Types of Services: ClusterIP, NodePort, Loadbalance and ExternalName

kubectl apply -f deployment.yaml         # Deploy an app
kubectl get pods                         # List running pods
kubectl get services                     # List services
kubectl describe pod <pod-name>          # Detailed info of a pod
kubectl delete -f deployment.yaml        # Delete deployment
kubectl logs <pod-name>                  # View pod logs
kubectl exec -it <pod-name> -- bash      # Access container terminal

Point Docker cli to minikube's docker daemon
eval $(minikube docker-env)

Build image inside minikube
./mvnw spring-boot:build-image -Dspring-boot.build-image.imageName=spring-k8s/spring-k8s/hello-spring-k8s:latest

Verfiy the image exists in minikube
docker images | grep hello-spring-k8s

Restart the deployment
kubectl rollout restart deployment gs-spring-boot-k8s

Forwading the request from computer to the service running in kubernate cluster
kubectl port-forward svc/gs-spring-boot-k8s 9090:80

What is gracefull shutdown, timeout for shutdown phase and its default value.

What is kubernates probes? types of probes: Liveness Probe and Readiness Probe
Spring boot integration with Kubernates probes
How to enable these probes in deployment.yaml file.
what is configMap, volumeMounts, env, volumes in deployment.
curl http://localhost:9090/actuator/env | jq

kubectl create configmap gs-spring-boot-k8s \
  --from-file=application.properties

These is two ways to create the docker image and run the docker image locally:
1) Using cloud native buildpacks:
 - use ./mvnw spring-boot:build-image
 - docker run -p 8080:8080 --name your-image-name -t tag-name
 *) to use this in kubernates like minikube you have two ways
	- Push it to docker kub
	- load it minikube - minikube image load your-image-name
2) Using dockerfile
 - create a docker file 
 - docker build -t your-image-name .
 - docker run -p 8080:8080 your-image-name
 - push to docker hub or load it to minikube

How to push to docker hub:
- docker tag your-image-name your-dockerhub-username/your-image-name
  docker push your-dockerhub-username/your-image-name
- use the deployed docker hub image name in deployement yaml file
- kubectl apply -f deployment.yaml


How to orchestrate applications using k8s:
1) Create the image run it locally or push it to docker hub
2) create the deployement file and service file
3) Appply those file using kubectl
4) Optional you can use config maps to externalize the application properties as well.

